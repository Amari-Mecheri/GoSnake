// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "gosnake/pkg/common"
import mock "github.com/stretchr/testify/mock"
import uimanager "gosnake/pkg/uimanager"

// UIManagerer is an autogenerated mock type for the UIManagerer type
type UIManagerer struct {
	mock.Mock
}

// ClearView provides a mock function with given fields: viewName
func (_m *UIManagerer) ClearView(viewName string) error {
	ret := _m.Called(viewName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(viewName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *UIManagerer) Close() {
	_m.Called()
}

// DisplayRedLayout provides a mock function with given fields: viewName, layout
func (_m *UIManagerer) DisplayRedLayout(viewName string, layout []string) error {
	ret := _m.Called(viewName, layout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(viewName, layout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MainLoop provides a mock function with given fields:
func (_m *UIManagerer) MainLoop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnKeyPress provides a mock function with given fields: fn
func (_m *UIManagerer) OnKeyPress(fn func(uimanager.Key) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(uimanager.Key) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenUIManager provides a mock function with given fields:
func (_m *UIManagerer) OpenUIManager() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Quit provides a mock function with given fields:
func (_m *UIManagerer) Quit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetView provides a mock function with given fields: viewName, position
func (_m *UIManagerer) SetView(viewName string, position common.ViewPosition) error {
	ret := _m.Called(viewName, position)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, common.ViewPosition) error); ok {
		r0 = rf(viewName, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetViewLayout provides a mock function with given fields: viewName, layout
func (_m *UIManagerer) SetViewLayout(viewName string, layout []string) error {
	ret := _m.Called(viewName, layout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(viewName, layout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: viewName, spriteList
func (_m *UIManagerer) Update(viewName string, spriteList []common.Sprite) error {
	ret := _m.Called(viewName, spriteList)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []common.Sprite) error); ok {
		r0 = rf(viewName, spriteList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLn provides a mock function with given fields: viewName, msg
func (_m *UIManagerer) UpdateLn(viewName string, msg string) error {
	ret := _m.Called(viewName, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(viewName, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
